// Code generated by ent, DO NOT EDIT.

package eval

import (
	"entgo.io/ent/dialect/sql"
	"github.com/nexentra/aesir/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Eval {
	return predicate.Eval(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Eval {
	return predicate.Eval(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Eval {
	return predicate.Eval(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Eval {
	return predicate.Eval(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Eval {
	return predicate.Eval(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Eval {
	return predicate.Eval(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Eval {
	return predicate.Eval(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Eval {
	return predicate.Eval(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Eval {
	return predicate.Eval(sql.FieldLTE(FieldID, id))
}

// Snippet applies equality check predicate on the "snippet" field. It's identical to SnippetEQ.
func Snippet(v string) predicate.Eval {
	return predicate.Eval(sql.FieldEQ(FieldSnippet, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v string) predicate.Eval {
	return predicate.Eval(sql.FieldEQ(FieldTime, v))
}

// SnippetEQ applies the EQ predicate on the "snippet" field.
func SnippetEQ(v string) predicate.Eval {
	return predicate.Eval(sql.FieldEQ(FieldSnippet, v))
}

// SnippetNEQ applies the NEQ predicate on the "snippet" field.
func SnippetNEQ(v string) predicate.Eval {
	return predicate.Eval(sql.FieldNEQ(FieldSnippet, v))
}

// SnippetIn applies the In predicate on the "snippet" field.
func SnippetIn(vs ...string) predicate.Eval {
	return predicate.Eval(sql.FieldIn(FieldSnippet, vs...))
}

// SnippetNotIn applies the NotIn predicate on the "snippet" field.
func SnippetNotIn(vs ...string) predicate.Eval {
	return predicate.Eval(sql.FieldNotIn(FieldSnippet, vs...))
}

// SnippetGT applies the GT predicate on the "snippet" field.
func SnippetGT(v string) predicate.Eval {
	return predicate.Eval(sql.FieldGT(FieldSnippet, v))
}

// SnippetGTE applies the GTE predicate on the "snippet" field.
func SnippetGTE(v string) predicate.Eval {
	return predicate.Eval(sql.FieldGTE(FieldSnippet, v))
}

// SnippetLT applies the LT predicate on the "snippet" field.
func SnippetLT(v string) predicate.Eval {
	return predicate.Eval(sql.FieldLT(FieldSnippet, v))
}

// SnippetLTE applies the LTE predicate on the "snippet" field.
func SnippetLTE(v string) predicate.Eval {
	return predicate.Eval(sql.FieldLTE(FieldSnippet, v))
}

// SnippetContains applies the Contains predicate on the "snippet" field.
func SnippetContains(v string) predicate.Eval {
	return predicate.Eval(sql.FieldContains(FieldSnippet, v))
}

// SnippetHasPrefix applies the HasPrefix predicate on the "snippet" field.
func SnippetHasPrefix(v string) predicate.Eval {
	return predicate.Eval(sql.FieldHasPrefix(FieldSnippet, v))
}

// SnippetHasSuffix applies the HasSuffix predicate on the "snippet" field.
func SnippetHasSuffix(v string) predicate.Eval {
	return predicate.Eval(sql.FieldHasSuffix(FieldSnippet, v))
}

// SnippetEqualFold applies the EqualFold predicate on the "snippet" field.
func SnippetEqualFold(v string) predicate.Eval {
	return predicate.Eval(sql.FieldEqualFold(FieldSnippet, v))
}

// SnippetContainsFold applies the ContainsFold predicate on the "snippet" field.
func SnippetContainsFold(v string) predicate.Eval {
	return predicate.Eval(sql.FieldContainsFold(FieldSnippet, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v string) predicate.Eval {
	return predicate.Eval(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v string) predicate.Eval {
	return predicate.Eval(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...string) predicate.Eval {
	return predicate.Eval(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...string) predicate.Eval {
	return predicate.Eval(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v string) predicate.Eval {
	return predicate.Eval(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v string) predicate.Eval {
	return predicate.Eval(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v string) predicate.Eval {
	return predicate.Eval(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v string) predicate.Eval {
	return predicate.Eval(sql.FieldLTE(FieldTime, v))
}

// TimeContains applies the Contains predicate on the "time" field.
func TimeContains(v string) predicate.Eval {
	return predicate.Eval(sql.FieldContains(FieldTime, v))
}

// TimeHasPrefix applies the HasPrefix predicate on the "time" field.
func TimeHasPrefix(v string) predicate.Eval {
	return predicate.Eval(sql.FieldHasPrefix(FieldTime, v))
}

// TimeHasSuffix applies the HasSuffix predicate on the "time" field.
func TimeHasSuffix(v string) predicate.Eval {
	return predicate.Eval(sql.FieldHasSuffix(FieldTime, v))
}

// TimeEqualFold applies the EqualFold predicate on the "time" field.
func TimeEqualFold(v string) predicate.Eval {
	return predicate.Eval(sql.FieldEqualFold(FieldTime, v))
}

// TimeContainsFold applies the ContainsFold predicate on the "time" field.
func TimeContainsFold(v string) predicate.Eval {
	return predicate.Eval(sql.FieldContainsFold(FieldTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Eval) predicate.Eval {
	return predicate.Eval(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Eval) predicate.Eval {
	return predicate.Eval(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Eval) predicate.Eval {
	return predicate.Eval(sql.NotPredicates(p))
}
