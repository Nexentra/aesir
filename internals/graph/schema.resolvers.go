package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/nexentra/aesir/evaluator"
	"github.com/nexentra/aesir/internals/graph/model"
	"github.com/nexentra/aesir/lexer"
	"github.com/nexentra/aesir/object"
	"github.com/nexentra/aesir/parser"
)

// EvaluateSnippet is the resolver for the EvaluateSnippet field.
func (r *mutationResolver) EvaluateSnippet(ctx context.Context, input model.EvalInput) (*model.Eval, error) {
	env := object.NewEnvironment()
	l := lexer.New(input.Snippet)
		p := parser.New(l)
		program := p.ParseProgram()
		if len(p.Errors()) != 0 {
			return nil, nil
		}
		evaluated := evaluator.Eval(program, env)
	

	eval := &model.Eval{
		Snippet: 	evaluated.Inspect(),
		Result:  "randNumber",
	}
	r.eval = append(r.eval, eval)
	return eval, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
