package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"os"

	"github.com/nexentra/aesir/evaluator"
	"github.com/nexentra/aesir/internals/graph/model"
	"github.com/nexentra/aesir/lexer"
	"github.com/nexentra/aesir/object"
	"github.com/nexentra/aesir/parser"
)

// EvaluateSnippet is the resolver for the EvaluateSnippet field.
func (r *mutationResolver) EvaluateSnippet(ctx context.Context, input model.EvalInput) (*model.Eval, error) {
	old := os.Stdout // keep backup of the real stdout
	f, w, _ := os.Pipe()
	os.Stdout = w
	env := object.NewEnvironment()
	l := lexer.New(input.Snippet)
		p := parser.New(l)
		program := p.ParseProgram()
		if len(p.Errors()) != 0 {
			return &model.Eval{}, fmt.Errorf("error parsing input: %v", p.Errors())
		}
		evaluated := evaluator.Eval(program, env)
		evaluated.Inspect()
		outC := make(chan string)
			// copy the output in a separate goroutine so printing can't block indefinitely
			go func() {
				var buf bytes.Buffer
				io.Copy(&buf, f)
				outC <- buf.String()
			}()

			// back to normal state
			w.Close()
			os.Stdout = old // restoring the real stdout
			out := <-outC

			fmt.Print(out)


			eval := &model.Eval{
				Snippet: 	out,
				Result:  "randNumber",
			}
			r.eval = append(r.eval, eval)
	return eval, nil
	
		return &model.Eval{}, fmt.Errorf("no print statement found")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
